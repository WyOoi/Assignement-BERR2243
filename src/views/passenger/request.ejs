<div class="row">
  <div class="col-lg-8">
    <div class="card shadow-sm border-0" data-aos="fade-up">
      <div class="card-header bg-white p-4 border-0">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <span class="badge bg-primary rounded-pill px-3 py-2 mb-2">New Ride</span>
            <h5 class="card-title fw-bold mb-0">Request a Ride</h5>
          </div>
          <a href="/passenger" class="btn btn-sm btn-outline-secondary">
            <i class="fas fa-arrow-left me-2"></i> Back to Dashboard
          </a>
        </div>
      </div>
      <div class="card-body p-4">
        <form id="rideRequestForm" action="/passenger/request" method="POST">
          <!-- Map Preview -->
          <div class="map-preview mb-4" data-aos="fade-up">
            <!-- OpenStreetMap with Leaflet -->
            <div class="card shadow-sm border-0 mb-3">
              <div class="card-header bg-white p-3 border-0">
                <div class="d-flex justify-content-between align-items-center">
                  <h6 class="fw-bold mb-0"><i class="fas fa-map-marked-alt text-primary me-2"></i> Interactive Map</h6>
                  <div>
                    <span class="badge bg-primary me-2" id="pickup-badge"><i class="fas fa-map-marker-alt me-1"></i> Pickup</span>
                    <span class="badge bg-danger" id="destination-badge"><i class="fas fa-location-arrow me-1"></i> Destination</span>
                  </div>
                </div>
              </div>
              <div class="card-body p-0">
                <div id="map" class="rounded-bottom" style="height: 450px; width: 100%; z-index: 1; position: relative;"></div>
              </div>
              <div class="card-footer bg-white p-3 border-0">
                <div class="d-flex justify-content-between align-items-center">
                  <small class="text-muted"><i class="fas fa-info-circle me-1"></i> Click on the map to set locations or use the search below</small>
                  <button type="button" class="btn btn-sm btn-outline-secondary" id="reset-map">
                    <i class="fas fa-redo-alt me-1"></i> Reset Map
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <div class="row" data-aos="fade-up" data-aos-delay="100">
            <div class="col-md-6 mb-4">
              <label for="pickup" class="form-label fw-bold">Pickup Location</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-map-marker-alt text-primary"></i>
                </span>
                <div class="autoComplete_wrapper flex-grow-1">
                  <input type="text" class="form-control border-start-0" id="pickup" name="pickup" placeholder="Search pickup location" required autocomplete="off">
                  <input type="hidden" id="pickup_lat" name="pickup_lat">
                  <input type="hidden" id="pickup_lon" name="pickup_lon">
                </div>
              </div>
            </div>
            
            <div class="col-md-6 mb-4">
              <label for="destination" class="form-label fw-bold">Destination</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-location-arrow text-primary"></i>
                </span>
                <div class="autoComplete_wrapper flex-grow-1">
                  <input type="text" class="form-control border-start-0" id="destination" name="destination" placeholder="Search destination" required autocomplete="off">
                  <input type="hidden" id="destination_lat" name="destination_lat">
                  <input type="hidden" id="destination_lon" name="destination_lon">
                </div>
              </div>
            </div>
          </div>
          
          <div class="row" data-aos="fade-up" data-aos-delay="200">
            <div class="col-md-6 mb-4">
              <label for="date" class="form-label fw-bold">Date</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-calendar-alt text-primary"></i>
                </span>
                <input type="date" class="form-control border-start-0" id="date" name="date" required min="<%= new Date().toISOString().split('T')[0] %>">
              </div>
            </div>
            
            <div class="col-md-6 mb-4">
              <label for="time" class="form-label fw-bold">Time</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-clock text-primary"></i>
                </span>
                <input type="time" class="form-control border-start-0" id="time" name="time" required>
              </div>
            </div>
          </div>
          
          <div class="row" data-aos="fade-up" data-aos-delay="300">
            <div class="col-md-6 mb-4">
              <label for="passengers" class="form-label fw-bold">Number of Passengers</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-users text-primary"></i>
                </span>
                <select class="form-select border-start-0" id="passengers" name="passengers" required>
                  <option value="1" selected>1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>
                  <option value="4">4</option>
                </select>
              </div>
            </div>
            
            <div class="col-md-6 mb-4">
              <label for="paymentMethod" class="form-label fw-bold">Payment Method</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-credit-card text-primary"></i>
                </span>
                <select class="form-select border-start-0" id="paymentMethod" name="paymentMethod">
                  <option value="cash" selected>Cash</option>
                  <option value="online">Online Payment</option>
                  <option value="ewallet">E-Wallet</option>
                </select>
              </div>
            </div>
          </div>
          
          <div class="mb-4" data-aos="fade-up" data-aos-delay="400">
            <label for="notes" class="form-label fw-bold">Additional Notes (Optional)</label>
            <div class="input-group">
              <span class="input-group-text bg-light border-end-0">
                <i class="fas fa-comment-alt text-primary"></i>
              </span>
              <textarea class="form-control border-start-0" id="notes" name="notes" rows="3" placeholder="Any special instructions for the driver"></textarea>
            </div>
          </div>
          
          <div class="d-grid" data-aos="fade-up" data-aos-delay="500">
            <button type="submit" class="btn btn-primary btn-lg shadow-sm">
              <i class="fas fa-paper-plane me-2"></i> Request Ride
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <div class="col-lg-4">
    <div class="card shadow-sm border-0 mb-4" data-aos="fade-up" data-aos-delay="100">
      <div class="card-header bg-white p-4 border-0">
        <h5 class="card-title fw-bold mb-0">
          <i class="fas fa-info-circle me-2 text-primary"></i> Fare Estimate
        </h5>
      </div>
      <div class="card-body p-4">
        <div id="fareEstimate" class="d-none">
          <div class="fare-details mb-4">
            <div class="d-flex justify-content-between align-items-center mb-2">
              <span>Base Fare</span>
              <span class="fw-bold">RM 5.00</span>
            </div>
            <div class="d-flex justify-content-between align-items-center mb-2">
              <span>Distance (<span id="estimatedDistance">0</span> km)</span>
              <span class="fw-bold">RM <span id="distanceFare">0.00</span></span>
            </div>
            <div class="d-flex justify-content-between align-items-center mb-2">
              <span>Time (<span id="estimatedTime">0</span> min)</span>
              <span class="fw-bold">RM <span id="timeFare">0.00</span></span>
            </div>
            <div class="d-flex justify-content-between align-items-center mb-2">
              <span>Platform Fee</span>
              <span class="fw-bold">RM 2.00</span>
            </div>
            <hr>
            <div class="d-flex justify-content-between align-items-center">
              <span class="fw-bold">Total Estimate</span>
              <span class="fw-bold fs-4 text-primary">RM <span id="totalFare">0.00</span></span>
            </div>
          </div>
          <div class="ride-details">
            <div class="d-flex align-items-center mb-3">
              <div class="ride-icon bg-primary text-white me-3">
                <i class="fas fa-route"></i>
              </div>
              <div>
                <small class="text-muted d-block">Estimated Distance</small>
                <span class="fw-bold"><span id="distanceValue">0</span> km</span>
              </div>
            </div>
            <div class="d-flex align-items-center">
              <div class="ride-icon bg-success text-white me-3">
                <i class="fas fa-clock"></i>
              </div>
              <div>
                <small class="text-muted d-block">Estimated Time</small>
                <span class="fw-bold"><span id="timeValue">0</span> min</span>
              </div>
            </div>
          </div>
        </div>
        
        <div id="fareInfo" class="fare-info">
          <div class="text-center py-3">
            <i class="fas fa-calculator fa-3x text-primary mb-3"></i>
            <h6>Select locations to see fare estimate</h6>
          </div>
          <hr>
          <div class="fare-rates">
            <div class="d-flex justify-content-between mb-2">
              <span>Base Fare</span>
              <span class="fw-bold">RM 5.00</span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Per KM Rate</span>
              <span class="fw-bold">RM 1.50</span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Per Minute Rate</span>
              <span class="fw-bold">RM 0.20</span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Platform Fee</span>
              <span class="fw-bold">RM 2.00</span>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="card shadow-sm border-0" data-aos="fade-up" data-aos-delay="200">
      <div class="card-header bg-white p-4 border-0">
        <h5 class="card-title fw-bold mb-0">
          <i class="fas fa-headset me-2 text-primary"></i> Need Help?
        </h5>
      </div>
      <div class="card-body p-4">
        <p class="text-muted">If you need assistance with your ride request, please contact our support team.</p>
        <div class="support-item d-flex align-items-center mb-3">
          <div class="support-icon bg-light rounded-circle me-3">
            <i class="fas fa-phone text-primary"></i>
          </div>
          <div>
            <small class="text-muted d-block">Call us at</small>
            <span class="fw-bold">+60 12-345 6789</span>
          </div>
        </div>
        <div class="support-item d-flex align-items-center">
          <div class="support-icon bg-light rounded-circle me-3">
            <i class="fas fa-envelope text-primary"></i>
          </div>
          <div>
            <small class="text-muted d-block">Email us at</small>
            <span class="fw-bold">support@mytaxi.utem.edu.my</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add Leaflet CSS -->
<link rel="stylesheet" href="/js/leaflet/leaflet.css" />
<!-- Fallback Leaflet CSS if local file fails -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<!-- Add Leaflet Routing Machine CSS -->
<link rel="stylesheet" href="/js/leaflet-routing-machine/leaflet-routing-machine.css" />
<!-- Fallback Leaflet Routing Machine CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.css" />

<!-- Add Leaflet Locate Control CSS -->
<link rel="stylesheet" href="/js/leaflet-locatecontrol/L.Control.Locate.min.css" />
<!-- Fallback Leaflet Locate Control CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.79.0/dist/L.Control.Locate.min.css" />

<!-- Add OpenStreetMap Nominatim Autocomplete CSS -->
<link rel="stylesheet" href="/js/autocomplete/css/autoComplete.css"/>
<!-- Fallback Autocomplete CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@10.2.7/dist/css/autoComplete.min.css"/>

<style>
  .autoComplete_wrapper {
    width: 100%;
    position: relative;
  }
  
  .autoComplete_wrapper > input {
    width: 100%;
    height: 100%;
    padding-left: 20px;
  }
  
  .autoComplete_wrapper > ul {
    position: absolute;
    max-height: 226px;
    overflow-y: scroll;
    top: 100%;
    left: 0;
    right: 0;
    padding: 0;
    margin: 0.5rem 0 0 0;
    border-radius: 0.6rem;
    background-color: #fff;
    box-shadow: 0 3px 6px rgba(149, 157, 165, 0.15);
    border: 1px solid rgba(33, 33, 33, 0.07);
    z-index: 1000;
  }
  
  .autoComplete_wrapper > ul > li {
    padding: 10px 20px;
    list-style: none;
    text-align: left;
    font-size: 16px;
    color: #212121;
    transition: all 0.1s ease-in-out;
    border-radius: 3px;
    background-color: rgba(255, 255, 255, 1);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    transition: all 0.2s ease;
  }
  
  .autoComplete_wrapper > ul > li::selection {
    color: rgba(#ffffff, 0);
    background-color: rgba(#ffffff, 0);
  }
  
  .autoComplete_wrapper > ul > li:hover {
    cursor: pointer;
    background-color: rgba(123, 123, 123, 0.1);
  }
  
  .autoComplete_wrapper > ul > li mark {
    background-color: transparent;
    color: var(--primary);
    font-weight: bold;
  }
  
  .autoComplete_wrapper > ul > li mark::selection {
    color: rgba(#ffffff, 0);
    background-color: rgba(#ffffff, 0);
  }
  
  .autoComplete_wrapper > ul > li[aria-selected="true"] {
    background-color: rgba(123, 123, 123, 0.1);
  }
  
  .leaflet-marker-icon {
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.4));
    transition: all 0.3s ease;
  }
  
  .map-legend {
    position: absolute;
    bottom: 30px;
    right: 10px;
    z-index: 1000;
    background: white;
    padding: 10px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
  }
  
  .map-legend-item {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
  }
  
  .map-legend-color {
    width: 20px;
    height: 4px;
    margin-right: 8px;
  }
  
  .pickup-pulse {
    display: block;
    width: 22px;
    height: 22px;
    border-radius: 50%;
    background: rgba(0, 123, 255, 0.3);
    border: 2px solid #007bff;
    position: absolute;
    animation: pulse 2s infinite;
  }
  
  .destination-pulse {
    display: block;
    width: 22px;
    height: 22px;
    border-radius: 50%;
    background: rgba(220, 53, 69, 0.3);
    border: 2px solid #dc3545;
    position: absolute;
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0% {
      transform: scale(0.5);
      opacity: 1;
    }
    100% {
      transform: scale(2);
      opacity: 0;
    }
  }
  
  .ride-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
</style>

<!-- Add Leaflet JS -->
<script src="/js/leaflet/leaflet.js"></script>
<!-- Fallback Leaflet JS if local file fails -->
<script>
  // Check if Leaflet loaded properly
  if (typeof L === 'undefined') {
    console.log('Local Leaflet failed to load, using CDN fallback');
    document.write('<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"><\/script>');
  }
</script>

<!-- Add Leaflet Routing Machine JS -->
<script src="/js/leaflet-routing-machine/leaflet-routing-machine.js"></script>
<!-- Fallback Leaflet Routing Machine JS -->
<script>
  // Wait for Leaflet to load, then check if Routing is available
  setTimeout(function() {
    if (typeof L === 'object' && typeof L.Routing === 'undefined') {
      console.log('Local Routing Machine failed to load, using CDN fallback');
      document.write('<script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"><\/script>');
    }
  }, 500);
</script>

<!-- Add Leaflet Locate Control JS -->
<script src="/js/leaflet-locatecontrol/L.Control.Locate.min.js"></script>
<!-- Fallback Leaflet Locate Control JS -->
<script>
  // Wait for Leaflet to load, then check if Locate Control is available
  setTimeout(function() {
    if (typeof L === 'object' && typeof L.control.locate === 'undefined') {
      console.log('Local Locate Control failed to load, using CDN fallback');
      document.write('<script src="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.79.0/dist/L.Control.Locate.min.js"><\/script>');
    }
  }, 500);
</script>

<!-- Add OpenStreetMap Nominatim Autocomplete JS -->
<script src="/js/autocomplete/autoComplete.min.js"></script>
<!-- Fallback Autocomplete JS -->
<script>
  // Check if autoComplete loaded properly
  setTimeout(function() {
    if (typeof autoComplete === 'undefined') {
      console.log('Local autoComplete failed to load, using CDN fallback');
      document.write('<script src="https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@10.2.7/dist/autoComplete.min.js"><\/script>');
    }
  }, 500);
</script>

<script>
  // Global map variable
  let map;
  let pickupMarker = null;
  let destinationMarker = null;
  let routingControl = null;
  let pickupPulse = null;
  let destinationPulse = null;
  let mapInitialized = false;

  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing map with delay...');
    
    // Ensure the map container exists and has dimensions
    const mapElement = document.getElementById('map');
    if (mapElement) {
      mapElement.style.height = '450px';
      mapElement.style.width = '100%';
      mapElement.style.display = 'block';
      
      // Try to initialize immediately
      initMap();
      
      // Also try with a delay as fallback
      setTimeout(initMap, 500);
    } else {
      console.error('Map container not found!');
    }
  });

  function initMap() {
    // Don't initialize twice
    if (mapInitialized) return;
    
    // Make sure the map container exists
    const mapElement = document.getElementById('map');
    if (!mapElement) {
      console.error('Map container not found!');
      return;
    }
    
    try {
      console.log('Attempting to initialize map...');
      
      // Create the map instance
      map = L.map('map', {
        center: [2.3139, 102.3197], // UTeM coordinates
        zoom: 13,
        zoomControl: false
      });
      
      // Mark as initialized
      mapInitialized = true;
      
      console.log('Map initialized successfully');
      
      // Add zoom control to the top-right
      L.control.zoom({
        position: 'topright'
      }).addTo(map);
      
      // Add OpenStreetMap tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);
      
      // Add map legend
      const legend = L.control({position: 'bottomright'});
      legend.onAdd = function(map) {
        const div = L.DomUtil.create('div', 'map-legend');
        div.innerHTML = `
          <div class="map-legend-item">
            <div class="map-legend-color" style="background: #007bff;"></div>
            <small>Pickup Location</small>
          </div>
          <div class="map-legend-item">
            <div class="map-legend-color" style="background: #dc3545;"></div>
            <small>Destination</small>
          </div>
          <div class="map-legend-item">
            <div class="map-legend-color" style="background: #FF6B35;"></div>
            <small>Route</small>
          </div>
        `;
        return div;
      };
      legend.addTo(map);
      
      // Add current location control
      L.control.locate({
        position: 'topright',
        flyTo: true,
        strings: {
          title: "Show my location"
        },
        locateOptions: {
          enableHighAccuracy: true
        }
      }).addTo(map);
      
      // Force map to refresh
      setTimeout(() => {
        map.invalidateSize();
        console.log('Map size refreshed');
      }, 200);
      
      // Setup all map functionality
      setupMapFunctionality();
      
    } catch (error) {
      console.error('Error initializing map:', error);
      mapInitialized = false;
    }
  }
  
  // Multiple attempts to refresh the map size
  function attemptMapRefresh() {
    if (map) {
      console.log('Attempting to refresh map size...');
      map.invalidateSize();
    }
  }
  
  // Try refreshing the map multiple times
  for (let delay = 500; delay <= 5000; delay += 500) {
    setTimeout(attemptMapRefresh, delay);
  }
  
  // Also refresh on resize
  window.addEventListener('resize', attemptMapRefresh);
  
  // Ensure map is refreshed when tab becomes visible
  document.addEventListener('visibilitychange', function() {
    if (!document.hidden && map) {
      setTimeout(attemptMapRefresh, 100);
    }
  });
  
  function setupMapFunctionality() {
    // Custom marker icons
    const pickupIcon = L.icon({
      iconUrl: '/js/leaflet/images/marker-icon.png',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowUrl: '/js/leaflet/images/marker-shadow.png',
      shadowSize: [41, 41]
    });
    
    const destinationIcon = L.icon({
      iconUrl: '/js/leaflet/images/marker-icon.png',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowUrl: '/js/leaflet/images/marker-shadow.png',
      shadowSize: [41, 41]
    });
    
    // Function to add pulse effect
    function addPulseEffect(latlng, type) {
      const pulseClass = type === 'pickup' ? 'pickup-pulse' : 'destination-pulse';
      const pulseDiv = L.DomUtil.create('div', pulseClass);
      const pulse = L.divIcon({
        html: pulseDiv,
        className: 'pulse-icon',
        iconSize: [22, 22],
        iconAnchor: [11, 11]
      });
      
      return L.marker(latlng, {
        icon: pulse,
        zIndexOffset: -1000
      }).addTo(map);
    }
    
    // Search for locations using OpenStreetMap Nominatim
    async function searchLocation(query) {
      try {
        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5&addressdetails=1`);
        const data = await response.json();
        return data;
      } catch (error) {
        console.error('Error searching for location:', error);
        return [];
      }
    }
    
    // Get references to input elements
    const pickupInput = document.getElementById('pickup');
    const pickupLat = document.getElementById('pickup_lat');
    const pickupLon = document.getElementById('pickup_lon');
    const destinationInput = document.getElementById('destination');
    const destinationLat = document.getElementById('destination_lat');
    const destinationLon = document.getElementById('destination_lon');
    
    // Initialize pickup autocomplete
    const pickupAutoComplete = new autoComplete({
      selector: "#pickup",
      placeHolder: "Search pickup location",
      data: {
        src: async (query) => {
          try {
            console.log("Searching for:", query);
            // Trigger search only if query is 3 chars or more
            if (query.length < 3) return [];
            
            // Add "Malaysia" to the query to prioritize Malaysian locations
            const results = await searchLocation(query + " Malaysia");
            console.log("Search results:", results);
            return results;
          } catch (error) {
            console.error("Search error:", error);
            return [];
          }
        },
        keys: ["display_name"],
        cache: false
      },
      resultItem: {
        highlight: true
      },
      events: {
        input: {
          focus() {
            pickupAutoComplete.start();
          }
        },
        results: (matches) => {
          console.log("Matches:", matches);
          // Clear pickup location if no matches and input is too short
          if (matches.results.length === 0 && pickupInput.value.length < 3) {
            pickupLat.value = '';
            pickupLon.value = '';
          }
        },
        selection: (event) => {
          console.log("Selection event:", event);
          const selection = event.detail.selection;
          const result = selection.value;
          
          // Update input with selection
          pickupInput.value = result.display_name;
          pickupLat.value = result.lat;
          pickupLon.value = result.lon;
          
          // Add or update marker
          if (pickupMarker) {
            map.removeLayer(pickupMarker);
            if (pickupPulse) map.removeLayer(pickupPulse);
          }
          
          pickupMarker = L.marker([result.lat, result.lon], {icon: pickupIcon}).addTo(map);
          pickupMarker.bindPopup('Pickup: ' + result.display_name).openPopup();
          
          // Add pulse effect
          pickupPulse = addPulseEffect([result.lat, result.lon], 'pickup');
          
          // Update badge status
          document.getElementById('pickup-badge').classList.add('bg-success');
          document.getElementById('pickup-badge').innerHTML = '<i class="fas fa-check-circle me-1"></i> Pickup Set';
          
          // Center map on marker with animation
          map.flyTo([result.lat, result.lon], 15, {
            animate: true,
            duration: 1
          });
          
          // Update route if both markers exist
          updateRoute();
          
          // Show toast notification
          showToast('Pickup location set', 'success');
        }
      },
      resultsList: {
        maxResults: 5,
        noResults: true,
      },
      threshold: 3,
      debounce: 300
    });
    
    // Initialize destination autocomplete
    const destinationAutoComplete = new autoComplete({
      selector: "#destination",
      placeHolder: "Search destination location",
      data: {
        src: async (query) => {
          try {
            // Trigger search only if query is 3 chars or more
            if (query.length < 3) return [];
            
            // Add "Malaysia" to the query to prioritize Malaysian locations
            const results = await searchLocation(query + " Malaysia");
            return results;
          } catch (error) {
            return [];
          }
        },
        keys: ["display_name"],
        cache: false
      },
      resultItem: {
        highlight: true
      },
      events: {
        input: {
          focus() {
            destinationAutoComplete.start();
          }
        },
        results: (matches) => {
          // Clear destination location if no matches and input is too short
          if (matches.results.length === 0 && destinationInput.value.length < 3) {
            destinationLat.value = '';
            destinationLon.value = '';
          }
        },
        selection: (event) => {
          const selection = event.detail.selection;
          const result = selection.value;
          
          // Update input with selection
          destinationInput.value = result.display_name;
          destinationLat.value = result.lat;
          destinationLon.value = result.lon;
          
          // Add or update marker
          if (destinationMarker) {
            map.removeLayer(destinationMarker);
            if (destinationPulse) map.removeLayer(destinationPulse);
          }
          
          destinationMarker = L.marker([result.lat, result.lon], {icon: destinationIcon}).addTo(map);
          destinationMarker.bindPopup('Destination: ' + result.display_name).openPopup();
          
          // Add pulse effect
          destinationPulse = addPulseEffect([result.lat, result.lon], 'destination');
          
          // Update badge status
          document.getElementById('destination-badge').classList.add('bg-success');
          document.getElementById('destination-badge').innerHTML = '<i class="fas fa-check-circle me-1"></i> Destination Set';
          
          // Center map on marker with animation
          map.flyTo([result.lat, result.lon], 15, {
            animate: true,
            duration: 1
          });
          
          // Update route if both markers exist
          updateRoute();
          
          // Show toast notification
          showToast('Destination location set', 'success');
        }
      },
      resultsList: {
        maxResults: 5,
        noResults: true,
      },
      threshold: 3,
      debounce: 300
    });
    
    // Calculate distance between two points using Haversine formula
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 6371; // Radius of the earth in km
      const dLat = deg2rad(lat2 - lat1);
      const dLon = deg2rad(lon2 - lon1);
      const a = 
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
        Math.sin(dLon/2) * Math.sin(dLon/2); 
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
      const distance = R * c; // Distance in km
      return distance;
    }
    
    function deg2rad(deg) {
      return deg * (Math.PI/180);
    }
    
    // Calculate fare based on distance
    function calculateFare(distance) {
      // Base fare for first 5km
      const baseFare = 5.00;
      // Rate per km after first 5km
      const ratePerKm = 1.50;
      // Rate per minute (estimated)
      const ratePerMinute = 0.20;
      // Platform fee
      const platformFee = 2.00;
      
      // Calculate distance fare
      let distanceFare = 0;
      if (distance > 5) {
        distanceFare = (distance - 5) * ratePerKm;
      }
      
      // Estimate time based on average speed of 40 km/h
      const estimatedTimeInMinutes = Math.ceil((distance / 40) * 60);
      const timeFare = estimatedTimeInMinutes * ratePerMinute;
      
      return {
        baseFare: baseFare,
        distanceFare: distanceFare,
        timeFare: timeFare,
        platformFee: platformFee,
        totalFare: baseFare + distanceFare + timeFare + platformFee,
        estimatedTimeInMinutes: estimatedTimeInMinutes,
        distance: distance
      };
    }
    
    // Update route and fare estimate
    function updateRoute() {
      if (pickupMarker && destinationMarker) {
        console.log("Updating route between markers");
        const pickupLatLng = pickupMarker.getLatLng();
        const destinationLatLng = destinationMarker.getLatLng();
        
        // Remove previous route if exists
        if (routingControl) {
          console.log("Removing previous route");
          map.removeControl(routingControl);
        }
        
        // Add new route
        try {
          console.log("Creating new route");
          routingControl = L.Routing.control({
            waypoints: [
              L.latLng(pickupLatLng.lat, pickupLatLng.lng),
              L.latLng(destinationLatLng.lat, destinationLatLng.lng)
            ],
            routeWhileDragging: false,
            showAlternatives: false,
            fitSelectedRoutes: true,
            lineOptions: {
              styles: [
              {color: 'black', opacity: 0.15, weight: 9},
              {color: '#FF6B35', opacity: 0.8, weight: 6}
            ]
          },
          createMarker: function() { return null; } // Don't create markers, we already have them
        }).addTo(map);
        } catch (error) {
          console.error("Error creating route:", error);
          
          // If routing fails, calculate direct distance and fare
          const directDistance = calculateDistance(
            pickupLatLng.lat, 
            pickupLatLng.lng, 
            destinationLatLng.lat, 
            destinationLatLng.lng
          );
          
          const fareDetails = calculateFare(directDistance);
          
          // Update fare estimate display
          document.getElementById('fareEstimate').classList.remove('d-none');
          document.getElementById('fareInfo').classList.add('d-none');
          
          document.getElementById('estimatedDistance').textContent = fareDetails.distance.toFixed(2);
          document.getElementById('estimatedTime').textContent = fareDetails.estimatedTimeInMinutes;
          document.getElementById('distanceFare').textContent = fareDetails.distanceFare.toFixed(2);
          document.getElementById('timeFare').textContent = fareDetails.timeFare.toFixed(2);
          document.getElementById('totalFare').textContent = fareDetails.totalFare.toFixed(2);
          
          document.getElementById('distanceValue').textContent = fareDetails.distance.toFixed(2);
          document.getElementById('timeValue').textContent = fareDetails.estimatedTimeInMinutes;
        }
        
        // Calculate and display fare estimate
        routingControl.on('routesfound', function(e) {
          const routes = e.routes;
          const summary = routes[0].summary;
          
          // Distance in kilometers
          const distance = (summary.totalDistance / 1000).toFixed(2);
          
          // Time in minutes
          const time = Math.ceil(summary.totalTime / 60);
          
          // Calculate fare using our custom function
          const fareDetails = calculateFare(parseFloat(distance));
          
          // Update fare estimate display
          document.getElementById('fareEstimate').classList.remove('d-none');
          document.getElementById('fareInfo').classList.add('d-none');
          
          document.getElementById('estimatedDistance').textContent = distance;
          document.getElementById('estimatedTime').textContent = time;
          document.getElementById('distanceFare').textContent = fareDetails.distanceFare.toFixed(2);
          document.getElementById('timeFare').textContent = fareDetails.timeFare.toFixed(2);
          document.getElementById('totalFare').textContent = fareDetails.totalFare.toFixed(2);
          
          document.getElementById('distanceValue').textContent = distance;
          document.getElementById('timeValue').textContent = time;
        });
      }
    }
    
    // Handle form submission
    document.getElementById('rideRequestForm').addEventListener('submit', function(e) {
      if (!pickupLat.value || !pickupLon.value || !destinationLat.value || !destinationLon.value) {
        e.preventDefault();
        alert('Please select valid pickup and destination locations from the suggestions.');
      }
    });
    
    // Set current time as default
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    document.getElementById('time').value = `${hours}:${minutes}`;
    
    // Allow map clicks to set locations
    map.on('click', function(e) {
      if (!pickupMarker) {
        // Set pickup location first if not set
        if (pickupMarker) {
          map.removeLayer(pickupMarker);
          if (pickupPulse) map.removeLayer(pickupPulse);
        }
        
        pickupMarker = L.marker(e.latlng, {icon: pickupIcon}).addTo(map);
        pickupMarker.bindPopup('Pickup Location').openPopup();
        
        // Add pulse effect
        pickupPulse = addPulseEffect(e.latlng, 'pickup');
        
        // Update badge status
        document.getElementById('pickup-badge').classList.add('bg-success');
        document.getElementById('pickup-badge').innerHTML = '<i class="fas fa-check-circle me-1"></i> Pickup Set';
        
        // Get address from coordinates (reverse geocoding)
        fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${e.latlng.lat}&lon=${e.latlng.lng}&addressdetails=1`)
          .then(response => response.json())
          .then(data => {
            if (data && data.display_name) {
              pickupInput.value = data.display_name;
              pickupLat.value = e.latlng.lat;
              pickupLon.value = e.latlng.lng;
              
              // Show toast notification
              showToast('Pickup location set', 'success');
            }
          });
      } else if (!destinationMarker) {
        // Set destination location if pickup is already set
        if (destinationMarker) {
          map.removeLayer(destinationMarker);
          if (destinationPulse) map.removeLayer(destinationPulse);
        }
        
        destinationMarker = L.marker(e.latlng, {icon: destinationIcon}).addTo(map);
        destinationMarker.bindPopup('Destination Location').openPopup();
        
        // Add pulse effect
        destinationPulse = addPulseEffect(e.latlng, 'destination');
        
        // Update badge status
        document.getElementById('destination-badge').classList.add('bg-success');
        document.getElementById('destination-badge').innerHTML = '<i class="fas fa-check-circle me-1"></i> Destination Set';
        
        // Get address from coordinates (reverse geocoding)
        fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${e.latlng.lat}&lon=${e.latlng.lng}&addressdetails=1`)
          .then(response => response.json())
          .then(data => {
            if (data && data.display_name) {
              destinationInput.value = data.display_name;
              destinationLat.value = e.latlng.lat;
              destinationLon.value = e.latlng.lng;
              
              // Show toast notification
              showToast('Destination location set', 'success');
              
              // Update route
              updateRoute();
            }
          });
      } else {
        // If both markers are set, update the pickup location
        if (pickupMarker) {
          map.removeLayer(pickupMarker);
          if (pickupPulse) map.removeLayer(pickupPulse);
        }
        
        pickupMarker = L.marker(e.latlng, {icon: pickupIcon}).addTo(map);
        pickupMarker.bindPopup('Pickup Location').openPopup();
        
        // Add pulse effect
        pickupPulse = addPulseEffect(e.latlng, 'pickup');
        
        // Get address from coordinates (reverse geocoding)
        fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${e.latlng.lat}&lon=${e.latlng.lng}&addressdetails=1`)
          .then(response => response.json())
          .then(data => {
            if (data && data.display_name) {
              pickupInput.value = data.display_name;
              pickupLat.value = e.latlng.lat;
              pickupLon.value = e.latlng.lng;
              
              // Update route
              updateRoute();
              
              // Show toast notification
              showToast('Pickup location updated', 'info');
            }
          });
      }
    });
    
    // Reset map button functionality
    document.getElementById('reset-map').addEventListener('click', function() {
      // Remove markers and route
      if (pickupMarker) {
        map.removeLayer(pickupMarker);
        pickupMarker = null;
      }
      
      if (pickupPulse) {
        map.removeLayer(pickupPulse);
        pickupPulse = null;
      }
      
      if (destinationMarker) {
        map.removeLayer(destinationMarker);
        destinationMarker = null;
      }
      
      if (destinationPulse) {
        map.removeLayer(destinationPulse);
        destinationPulse = null;
      }
      
      if (routingControl) {
        map.removeControl(routingControl);
        routingControl = null;
      }
      
      // Clear inputs
      pickupInput.value = '';
      pickupLat.value = '';
      pickupLon.value = '';
      destinationInput.value = '';
      destinationLat.value = '';
      destinationLon.value = '';
      
      // Reset badges
      document.getElementById('pickup-badge').classList.remove('bg-success');
      document.getElementById('pickup-badge').innerHTML = '<i class="fas fa-map-marker-alt me-1"></i> Pickup';
      document.getElementById('destination-badge').classList.remove('bg-success');
      document.getElementById('destination-badge').innerHTML = '<i class="fas fa-location-arrow me-1"></i> Destination';
      
      // Reset fare estimate
      document.getElementById('fareEstimate').classList.add('d-none');
      document.getElementById('fareInfo').classList.remove('d-none');
      
      // Reset map view
      map.setView([2.3139, 102.3197], 13);
      
      // Show notification
      showToast('Map has been reset', 'info');
    });
  }
  
  // Function to show toast notifications
  function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type} border-0 position-fixed bottom-0 end-0 m-3`;
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');
    toast.style.zIndex = '9999';
    
    toast.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">
          <i class="fas fa-${type === 'success' ? 'check-circle' : 'info-circle'} me-2"></i> ${message}
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    `;
    
    document.body.appendChild(toast);
    
    const bsToast = new bootstrap.Toast(toast, {
      autohide: true,
      delay: 3000
    });
    
    bsToast.show();
    
    // Remove from DOM after hiding
    toast.addEventListener('hidden.bs.toast', function() {
      document.body.removeChild(toast);
    });
  }

  // Add this function to check if the map is visible and fix it if not
  function checkMapVisibility() {
    if (map && !mapInitialized) {
      console.log('Map not properly initialized, attempting to fix...');
      
      // Try to add the tile layer again with alternative providers
      try {
        // Try OpenStreetMap standard tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        
        // Force map to refresh
        map.invalidateSize();
        
        console.log('Added OSM standard tiles');
      } catch (error) {
        console.error('Failed to add OSM tiles:', error);
        
        try {
          // Try Carto tiles as fallback
          L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
          }).addTo(map);
          
          console.log('Added Carto tiles as fallback');
        } catch (error) {
          console.error('Failed to add Carto tiles:', error);
        }
      }
    }
  }
  
  // Check map visibility after a delay
  setTimeout(checkMapVisibility, 2000);
  setTimeout(checkMapVisibility, 5000);
  
  // Final fallback: If nothing worked, create the map from scratch
  setTimeout(function() {
    if (!mapInitialized || !map) {
      console.log('Final fallback: Creating map from scratch');
      
      try {
        // Get the map container
        const mapElement = document.getElementById('map');
        
        // Clear any previous content
        if (mapElement) {
          mapElement.innerHTML = '';
          
          // Create map with CDN resources
          map = L.map('map', {
            center: [2.3139, 102.3197],
            zoom: 13
          });
          
          // Add tile layer directly from CDN
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          }).addTo(map);
          
          // Force map to refresh
          map.invalidateSize();
          
          // Mark as initialized
          mapInitialized = true;
          
          // Setup map functionality
          setupMapFunctionality();
          
          console.log('Map recreated successfully');
        }
      } catch (error) {
        console.error('Failed to create map in final fallback:', error);
      }
    }
  }, 8000);
</script>