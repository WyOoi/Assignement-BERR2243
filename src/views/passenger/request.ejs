<div class="row">
  <div class="col-lg-8">
    <div class="card shadow-sm border-0" data-aos="fade-up">
      <div class="card-header bg-white p-4 border-0">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <span class="badge bg-primary rounded-pill px-3 py-2 mb-2">New Ride</span>
            <h5 class="card-title fw-bold mb-0">Request a Ride</h5>
          </div>
          <a href="/passenger" class="btn btn-sm btn-outline-secondary">
            <i class="fas fa-arrow-left me-2"></i> Back to Dashboard
          </a>
        </div>
      </div>
      <div class="card-body p-4">
        <form id="rideRequestForm" action="/passenger/request" method="POST">

          <!-- Custom styles for location validation -->
          <style>
            .input-group.location-invalid .form-control {
              border-color: #dc3545;
            }
            .validation-icon {
              opacity: 0;
              transition: opacity 0.3s ease;
            }
            .validation-icon:not(.d-none) {
              opacity: 1;
            }
            .invalid-feedback-custom {
              display: none;
              width: 100%;
              margin-top: 0.25rem;
              font-size: 0.875em;
              color: #dc3545;
            }
            .invalid-feedback-custom:not(.d-none) {
              display: block;
            }
            .autoComplete_wrapper {
              position: relative;
              width: 100%;
            }
            .autoComplete_wrapper mark {
              background-color: rgba(var(--bs-primary-rgb), 0.2);
              color: inherit;
              padding: 0;
            }
            .autoComplete_wrapper > ul {
              position: absolute;
              max-height: 226px;
              overflow-y: auto;
              box-sizing: border-box;
              left: 0;
              right: 0;
              margin: 0.1rem 0 0 0;
              padding: 0;
              z-index: 1000;
              list-style: none;
              border-radius: 0.5rem;
              background-color: #fff;
              border: 1px solid rgba(0, 0, 0, 0.1);
              box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
              outline: none;
              transition: all 0.2s ease-in-out;
              width: 100%;
            }
            .autoComplete_wrapper > ul > li {
              margin: 0;
              padding: 0.75rem 1rem;
              text-align: left;
              font-size: 0.9rem;
              color: #333;
              border-bottom: 1px solid rgba(0, 0, 0, 0.05);
              transition: all 0.2s ease;
              display: flex;
              align-items: center;
            }
            .autoComplete_wrapper > ul > li:last-child {
              border-bottom: none;
            }
            .autoComplete_wrapper > ul > li .location-icon {
              margin-right: 10px;
              color: var(--bs-primary);
              flex-shrink: 0;
            }
            .autoComplete_wrapper > ul > li .location-details {
              display: flex;
              flex-direction: column;
              overflow: hidden;
            }
            .autoComplete_wrapper > ul > li .location-name {
              font-weight: 500;
              white-space: nowrap;
              overflow: hidden;
              text-overflow: ellipsis;
            }
            .autoComplete_wrapper > ul > li .location-address {
              font-size: 0.8rem;
              color: #666;
              white-space: nowrap;
              overflow: hidden;
              text-overflow: ellipsis;
            }
            .autoComplete_wrapper > ul > li:hover {
              cursor: pointer;
              background-color: rgba(var(--bs-primary-rgb), 0.1);
            }
            .autoComplete_wrapper > ul > li[aria-selected="true"] {
              background-color: rgba(var(--bs-primary-rgb), 0.15);
            }
            .autoComplete_wrapper > ul > li .coordinates {
              font-size: 0.75rem;
              color: #999;
              margin-top: 2px;
            }
            .autoComplete_wrapper > ul[hidden],
            .autoComplete_wrapper > ul:empty {
              display: none !important;
              opacity: 0;
              transform: scale(0);
            }
            .autoComplete_wrapper > ul .no_result {
              padding: 0.75rem 1rem;
              font-size: 0.9rem;
              color: #666;
              text-align: center;
              border-bottom: none;
            }
            .autoComplete_wrapper > ul .no_result span {
              font-style: italic;
            }
            .autoComplete_wrapper > ul .searching {
              padding: 0.75rem 1rem;
              font-size: 0.9rem;
              color: #666;
              text-align: center;
              border-bottom: none;
              display: flex;
              align-items: center;
              justify-content: center;
            }
            .autoComplete_wrapper > ul .searching .spinner-border {
              width: 1rem;
              height: 1rem;
              margin-right: 0.5rem;
            }
            .autoComplete_result:hover {
              background-color: rgba(var(--bs-primary-rgb), 0.1);
            }
            .autoComplete_selected {
              background-color: rgba(var(--bs-primary-rgb), 0.2) !important;
            }
          </style>

          <!-- Map Preview -->
          <div class="map-preview mb-4" data-aos="fade-up">
            <!-- OpenStreetMap with iframe -->
            <div class="card shadow-sm border-0 mb-3">
              <div class="card-header bg-white p-3 border-0">
                <div class="d-flex justify-content-between align-items-center">
                  <h6 class="fw-bold mb-0"><i class="fas fa-map-marked-alt text-primary me-2"></i> Interactive Map</h6>
                  <div>
                    <span class="badge bg-primary me-2" id="pickup-badge"><i class="fas fa-map-marker-alt me-1"></i> Pickup</span>
                    <span class="badge bg-danger" id="destination-badge"><i class="fas fa-location-arrow me-1"></i> Destination</span>
                  </div>
                </div>
              </div>
              <div class="card-body p-0">
                <!-- Simple Map Implementation -->
                <div id="simple-map-container" style="height: 450px; width: 100%; position: relative;">
                  <!-- Embed OpenStreetMap directly -->
                  <iframe 
                    id="map-iframe"
                    width="100%" 
                    height="450" 
                    frameborder="0" 
                    scrolling="no" 
                    marginheight="0" 
                    marginwidth="0" 
                    src="https://www.openstreetmap.org/export/embed.html?bbox=102.2697639465332%2C2.2639000000000087%2C102.3697639465332%2C2.3639000000000087&amp;layer=mapnik&amp;marker=2.3139%2C102.3197" 
                    style="border: 1px solid #ccc; width: 100%; height: 450px;">
                  </iframe>
                  
                  <div style="position: absolute; top: 10px; left: 10px; z-index: 1000; background: white; padding: 10px; border-radius: 5px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
                    <p class="mb-1"><strong>Pickup:</strong> <span id="pickup-display">Not selected</span></p>
                    <p class="mb-1"><strong>Destination:</strong> <span id="destination-display">Not selected</span></p>
                    <p class="mb-0"><strong>Distance:</strong> <span id="distance-display">0 km</span></p>
                  </div>
                </div>
              </div>
              <div class="card-footer bg-white p-3 border-0">
                <div class="d-flex justify-content-between align-items-center">
                  <small class="text-muted"><i class="fas fa-info-circle me-1"></i> Enter locations in the fields below to calculate fare</small>
                  <button type="button" class="btn btn-sm btn-outline-secondary" id="reset-map">
                    <i class="fas fa-redo-alt me-1"></i> Reset
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <div class="row" data-aos="fade-up" data-aos-delay="100">
            <div class="col-md-6 mb-4">
              <label for="pickup" class="form-label fw-bold">Pickup Location</label>
              <div class="input-group input-group-lg input-group-with-suggestions">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-map-marker-alt text-primary"></i>
                </span>
                  <input type="text" class="form-control border-start-0" id="pickup" name="pickup" placeholder="Search pickup location" required autocomplete="off">
                  <input type="hidden" id="pickup_lat" name="pickup_lat">
                  <input type="hidden" id="pickup_lon" name="pickup_lon">
                <div class="location-suggestions" id="pickup-suggestions"></div>
                </div>
              <div class="invalid-feedback-custom text-danger mt-1 d-none" id="pickup-error">
                Please select a valid location from the suggestions
              </div>
            </div>
            
            <div class="col-md-6 mb-4">
              <label for="destination" class="form-label fw-bold">Destination</label>
              <div class="input-group input-group-lg input-group-with-suggestions">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-location-arrow text-primary"></i>
                </span>
                  <input type="text" class="form-control border-start-0" id="destination" name="destination" placeholder="Search destination" required autocomplete="off">
                  <input type="hidden" id="destination_lat" name="destination_lat">
                  <input type="hidden" id="destination_lon" name="destination_lon">
                <div class="location-suggestions" id="destination-suggestions"></div>
                </div>
              <div class="invalid-feedback-custom text-danger mt-1 d-none" id="destination-error">
                Please select a valid location from the suggestions
              </div>
            </div>
          </div>
          
          <div class="row" data-aos="fade-up" data-aos-delay="200">
            <div class="col-md-6 mb-4">
              <label for="date" class="form-label fw-bold">Date</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-calendar-alt text-primary"></i>
                </span>
                <input type="date" class="form-control border-start-0" id="date" name="date" required min="<%= new Date().toISOString().split('T')[0] %>">
              </div>
            </div>
            
            <div class="col-md-6 mb-4">
              <label for="time" class="form-label fw-bold">Time</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-clock text-primary"></i>
                </span>
                <input type="time" class="form-control border-start-0" id="time" name="time" required>
              </div>
            </div>
          </div>
          
          <div class="row" data-aos="fade-up" data-aos-delay="300">
            <div class="col-md-6 mb-4">
              <label for="passengers" class="form-label fw-bold">Number of Passengers</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-users text-primary"></i>
                </span>
                <select class="form-select border-start-0" id="passengers" name="passengers" required>
                  <option value="1" selected>1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>
                  <option value="4">4</option>
                </select>
              </div>
            </div>
            
            <div class="col-md-6 mb-4">
              <label for="paymentMethod" class="form-label fw-bold">Payment Method</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-credit-card text-primary"></i>
                </span>
                <select class="form-select border-start-0" id="paymentMethod" name="paymentMethod">
                  <option value="cash" selected>Cash</option>
                  <option value="online">Online Payment</option>
                  <option value="ewallet">E-Wallet</option>
                </select>
              </div>
            </div>
          </div>
          
          <div class="mb-4" data-aos="fade-up" data-aos-delay="400">
            <label for="notes" class="form-label fw-bold">Additional Notes (Optional)</label>
            <div class="input-group">
              <span class="input-group-text bg-light border-end-0">
                <i class="fas fa-comment-alt text-primary"></i>
              </span>
              <textarea class="form-control border-start-0" id="notes" name="notes" rows="3" placeholder="Any special instructions for the driver"></textarea>
            </div>
          </div>
          
          <div class="d-grid" data-aos="fade-up" data-aos-delay="500">
            <button type="submit" class="btn btn-primary btn-lg shadow-sm">
              <i class="fas fa-paper-plane me-2"></i> Request Ride
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <div class="col-lg-4">
    <div class="card shadow-sm border-0 mb-4" data-aos="fade-up" data-aos-delay="100">
      <div class="card-header bg-white p-4 border-0">
        <h5 class="card-title fw-bold mb-0">
          <i class="fas fa-info-circle me-2 text-primary"></i> Fare Estimate
        </h5>
      </div>
      <div class="card-body p-4">
        <div id="fareEstimate" class="d-none">
          <div class="fare-details mb-4">
            <div class="d-flex justify-content-between align-items-center mb-2">
              <span>Base Fare</span>
              <span class="fw-bold">RM 5.00</span>
            </div>
            <div class="d-flex justify-content-between align-items-center mb-2">
              <span>Distance (<span id="estimatedDistance">0</span> km)</span>
              <span class="fw-bold">RM <span id="distanceFare">0.00</span></span>
            </div>
            <div class="d-flex justify-content-between align-items-center mb-2">
              <span>Time (<span id="estimatedTime">0</span> min)</span>
              <span class="fw-bold">RM <span id="timeFare">0.00</span></span>
            </div>
            <div class="d-flex justify-content-between align-items-center mb-2">
              <span>Platform Fee</span>
              <span class="fw-bold">RM 2.00</span>
            </div>
            <hr>
            <div class="d-flex justify-content-between align-items-center">
              <span class="fw-bold">Total Estimate</span>
              <span class="fw-bold fs-4 text-primary">RM <span id="totalFare">0.00</span></span>
            </div>
          </div>
          <div class="ride-details">
            <div class="d-flex align-items-center mb-3">
              <div class="ride-icon bg-primary text-white me-3">
                <i class="fas fa-route"></i>
              </div>
              <div>
                <small class="text-muted d-block">Estimated Distance</small>
                <span class="fw-bold"><span id="distanceValue">0</span> km</span>
              </div>
            </div>
            <div class="d-flex align-items-center">
              <div class="ride-icon bg-success text-white me-3">
                <i class="fas fa-clock"></i>
              </div>
              <div>
                <small class="text-muted d-block">Estimated Time</small>
                <span class="fw-bold"><span id="timeValue">0</span> min</span>
              </div>
            </div>
          </div>
        </div>
        
        <div id="fareInfo" class="fare-info">
          <div class="text-center py-3">
            <i class="fas fa-calculator fa-3x text-primary mb-3"></i>
            <h6>Select locations to see fare estimate</h6>
          </div>
          <hr>
          <div class="fare-rates">
            <div class="d-flex justify-content-between mb-2">
              <span>Base Fare</span>
              <span class="fw-bold">RM 5.00</span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Per KM Rate</span>
              <span class="fw-bold">RM 1.50</span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Per Minute Rate</span>
              <span class="fw-bold">RM 0.20</span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Platform Fee</span>
              <span class="fw-bold">RM 2.00</span>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="card shadow-sm border-0" data-aos="fade-up" data-aos-delay="200">
      <div class="card-header bg-white p-4 border-0">
        <h5 class="card-title fw-bold mb-0">
          <i class="fas fa-headset me-2 text-primary"></i> Need Help?
        </h5>
      </div>
      <div class="card-body p-4">
        <p class="text-muted">If you need assistance with your ride request, please contact our support team.</p>
        <div class="support-item d-flex align-items-center mb-3">
          <div class="support-icon bg-light rounded-circle me-3">
            <i class="fas fa-phone text-primary"></i>
          </div>
          <div>
            <small class="text-muted d-block">Call us at</small>
            <span class="fw-bold">+60 12-345 6789</span>
          </div>
        </div>
        <div class="support-item d-flex align-items-center">
          <div class="support-icon bg-light rounded-circle me-3">
            <i class="fas fa-envelope text-primary"></i>
          </div>
          <div>
            <small class="text-muted d-block">Email us at</small>
            <span class="fw-bold">support@mytaxi.utem.edu.my</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add Leaflet CSS -->
<link rel="stylesheet" href="/js/leaflet/leaflet.css" />
<!-- Fallback Leaflet CSS if local file fails -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="anonymous" />

<!-- Add Leaflet Routing Machine CSS -->
<link rel="stylesheet" href="/js/leaflet-routing-machine/leaflet-routing-machine.css" />
<!-- Fallback Leaflet Routing Machine CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.css" />

<!-- Add Leaflet Locate Control CSS -->
<link rel="stylesheet" href="/js/leaflet-locatecontrol/L.Control.Locate.min.css" />
<!-- Fallback Leaflet Locate Control CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.79.0/dist/L.Control.Locate.min.css" />

<!-- Add OpenStreetMap Nominatim Autocomplete CSS -->
<link rel="stylesheet" href="/js/autocomplete/css/autoComplete.css"/>

<style>
  .autoComplete_wrapper {
    width: 100%;
    position: relative;
  }
  
  .autoComplete_wrapper > input {
    width: 100%;
    height: 100%;
    padding-left: 20px;
  }
  
  .autoComplete_wrapper > ul {
    position: absolute;
    max-height: 226px;
    overflow-y: scroll;
    top: 100%;
    left: 0;
    right: 0;
    padding: 0;
    margin: 0.5rem 0 0 0;
    border-radius: 0.6rem;
    background-color: #fff;
    box-shadow: 0 3px 6px rgba(149, 157, 165, 0.15);
    border: 1px solid rgba(33, 33, 33, 0.07);
    z-index: 1000;
  }
  
  .autoComplete_wrapper > ul > li {
    padding: 10px 20px;
    list-style: none;
    text-align: left;
    font-size: 16px;
    color: #212121;
    transition: all 0.1s ease-in-out;
    border-radius: 3px;
    background-color: rgba(255, 255, 255, 1);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    transition: all 0.2s ease;
  }
  
  .autoComplete_wrapper > ul > li::selection {
    color: rgba(#ffffff, 0);
    background-color: rgba(#ffffff, 0);
  }
  
  .autoComplete_wrapper > ul > li:hover {
    cursor: pointer;
    background-color: rgba(123, 123, 123, 0.1);
  }
  
  .autoComplete_wrapper > ul > li mark {
    background-color: transparent;
    color: var(--primary);
    font-weight: bold;
  }
  
  .autoComplete_wrapper > ul > li mark::selection {
    color: rgba(#ffffff, 0);
    background-color: rgba(#ffffff, 0);
  }
  
  .autoComplete_wrapper > ul > li[aria-selected="true"] {
    background-color: rgba(123, 123, 123, 0.1);
  }
  
  .leaflet-marker-icon {
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.4));
    transition: all 0.3s ease;
  }
  
  .map-legend {
    position: absolute;
    bottom: 30px;
    right: 10px;
    z-index: 1000;
    background: white;
    padding: 10px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
  }
  
  .map-legend-item {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
  }
  
  .map-legend-color {
    width: 20px;
    height: 4px;
    margin-right: 8px;
  }
  
  .pickup-pulse {
    display: block;
    width: 22px;
    height: 22px;
    border-radius: 50%;
    background: rgba(0, 123, 255, 0.3);
    border: 2px solid #007bff;
    position: absolute;
    animation: pulse 2s infinite;
  }
  
  .destination-pulse {
    display: block;
    width: 22px;
    height: 22px;
    border-radius: 50%;
    background: rgba(220, 53, 69, 0.3);
    border: 2px solid #dc3545;
    position: absolute;
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0% {
      transform: scale(0.5);
      opacity: 1;
    }
    100% {
      transform: scale(2);
      opacity: 0;
    }
  }
  
  .ride-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  /* Fix for map container */
  #map {
    min-height: 450px !important;
    height: 450px !important;
    width: 100% !important;
    z-index: 1 !important;
    background-color: #f8f9fa !important;
  }
  
  /* Make sure Leaflet controls are visible */
  .leaflet-control-container {
    z-index: 1000 !important;
  }
  
  /* Custom styles for location suggestions */
  .location-suggestions {
    position: absolute;
    width: 100%;
    max-height: 250px;
    overflow-y: auto;
    background: #343a40;
    border: 1px solid #2c3136;
    border-radius: 0.25rem;
    z-index: 1000;
    box-shadow: 0 5px 10px rgba(0,0,0,0.3);
    display: none;
    top: 100%; /* Position directly below the input */
    left: 0;
    color: white;
  }
  
  .input-group-with-suggestions {
    position: relative;
  }
  
  .location-suggestion-item {
    padding: 10px 15px;
    border-bottom: 1px solid #454d55;
    cursor: pointer;
  }
  
  .location-suggestion-item:hover {
    background-color: #454d55;
  }
  
  .location-suggestion-item:last-child {
    border-bottom: none;
  }
  
  .location-name {
    font-weight: 500;
    color: white;
  }
  
  .location-address {
    font-size: 0.85rem;
    color: #adb5bd;
  }
  
  .location-coordinates {
    font-size: 0.75rem;
    color: #6c757d;
  }
  
  .location-searching {
    padding: 10px 15px;
    text-align: center;
    color: #adb5bd;
  }
  
  .location-no-results {
    padding: 10px 15px;
    text-align: center;
    color: #adb5bd;
    font-style: italic;
  }

  .search-button {
    position: absolute;
    right: 0;
    top: 0;
    bottom: 0;
    background: transparent;
    border: none;
    color: #6c757d;
    font-size: 1.25rem;
    padding: 0 15px;
    z-index: 5;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .search-button:hover {
    color: var(--bs-primary);
  }
</style>

<!-- Add Leaflet JS -->
<script src="/js/leaflet/leaflet.js"></script>
<!-- Fallback Leaflet JS if local file fails -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin="anonymous"></script>

<!-- Add Leaflet Routing Machine JS -->
<script src="/js/leaflet-routing-machine/leaflet-routing-machine.js"></script>
<!-- Fallback Leaflet Routing Machine JS -->
<script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>

<!-- Add Leaflet Locate Control JS -->
<script src="/js/leaflet-locatecontrol/L.Control.Locate.min.js"></script>
<!-- Fallback Leaflet Locate Control JS -->
<script src="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.79.0/dist/L.Control.Locate.min.js"></script>

<!-- Add OpenStreetMap Nominatim Autocomplete JS -->
<script src="https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@10.2.7/dist/autoComplete.min.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded - Initializing location search');
    
    // Get form elements
    const pickupInput = document.getElementById('pickup');
    const pickupLat = document.getElementById('pickup_lat');
    const pickupLon = document.getElementById('pickup_lon');
    const pickupSuggestions = document.getElementById('pickup-suggestions');
    const pickupError = document.getElementById('pickup-error');
    
    const destinationInput = document.getElementById('destination');
    const destinationLat = document.getElementById('destination_lat');
    const destinationLon = document.getElementById('destination_lon');
    const destinationSuggestions = document.getElementById('destination-suggestions');
    const destinationError = document.getElementById('destination-error');
    
    // Check if elements exist
    console.log('Pickup input exists:', !!pickupInput);
    console.log('Pickup suggestions exists:', !!pickupSuggestions);
    console.log('Destination input exists:', !!destinationInput);
    console.log('Destination suggestions exists:', !!destinationSuggestions);
    
    // Display elements
    const pickupDisplay = document.getElementById('pickup-display');
    const destinationDisplay = document.getElementById('destination-display');
    const distanceDisplay = document.getElementById('distance-display');
    const pickupBadge = document.getElementById('pickup-badge');
    const destinationBadge = document.getElementById('destination-badge');
    
    // Fare calculation elements
    const fareEstimate = document.getElementById('fareEstimate');
    const fareInfo = document.getElementById('fareInfo');
    const estimatedDistanceEl = document.getElementById('estimatedDistance');
    const estimatedTimeEl = document.getElementById('estimatedTime');
    const distanceFareEl = document.getElementById('distanceFare');
    const timeFareEl = document.getElementById('timeFare');
    const totalFareEl = document.getElementById('totalFare');
    const distanceValueEl = document.getElementById('distanceValue');
    const timeValueEl = document.getElementById('timeValue');
    
    // Reset button
    const resetButton = document.getElementById('reset-map');
    
    // Store the original input values to detect manual changes
    let lastValidPickupValue = '';
    let lastValidDestinationValue = '';
    
    // Flag to track if location was selected from dropdown
    let pickupSelectedFromDropdown = false;
    let destinationSelectedFromDropdown = false;
    
    // Debounce function to limit API calls
    function debounce(func, wait) {
      let timeout;
      return function(...args) {
        const context = this;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), wait);
      };
    }
    
    // Fallback data for testing when API fails
    const fallbackLocations = [
      {
        display_name: "Universiti Teknikal Malaysia Melaka (UTeM) Main Campus, Jalan UTEM, Hang Tuah Jaya Municipal Council, Alor Gajah, Malacca, 76100, Malaysia",
        lat: "2.3139",
        lon: "102.3197"
      },
      {
        display_name: "Kuala Lumpur International Airport (KLIA), Sepang, Selangor, Malaysia",
        lat: "2.7456",
        lon: "101.7099"
      },
      {
        display_name: "Kuala Lumpur City Centre, Kuala Lumpur, Federal Territory of Kuala Lumpur, Malaysia",
        lat: "3.1502",
        lon: "101.7077"
      },
      {
        display_name: "Melaka Sentral, Jalan Tun Razak, Peringgit, Malacca City, Malacca, Malaysia",
        lat: "2.2343",
        lon: "102.2465"
      },
      {
        display_name: "Dataran Pahlawan Melaka Megamall, Jalan Merdeka, Banda Hilir, Malacca City, Malacca, Malaysia",
        lat: "2.1905",
        lon: "102.2501"
      }
    ];
    
    // Search OpenStreetMap for locations
    async function searchLocations(query, suggestionElement, errorElement, useAPI = true) {
      console.log('Searching for:', query);
      
      if (query.length < 3) {
        suggestionElement.innerHTML = '<div class="location-no-results">Type at least 3 characters to search</div>';
        suggestionElement.style.display = 'block';
        console.log('Query too short');
        return;
      }
      
      suggestionElement.innerHTML = '<div class="location-searching"><div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div>Searching locations...</div>';
      suggestionElement.style.display = 'block';
      console.log('Showing loading indicator');
      
      try {
        let data = [];
        
        if (useAPI) {
          try {
            console.log('Fetching from Nominatim API');
            // Add a timestamp to prevent caching
            const timestamp = new Date().getTime();
            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5&addressdetails=1&_=${timestamp}`, {
              headers: {
                'User-Agent': 'MyTaxiApp/1.0',
                'Accept-Language': 'en'
              }
            });
            
            if (!response.ok) {
              throw new Error(`API responded with status: ${response.status}`);
            }
            
            data = await response.json();
            console.log('Search results from API:', data);
          } catch (apiError) {
            console.error("API Error:", apiError);
            // If API fails, use fallback data
            console.log('Using fallback data due to API error');
            data = fallbackLocations.filter(loc => 
              loc.display_name.toLowerCase().includes(query.toLowerCase())
            );
          }
        } else {
          // Use fallback data directly
          console.log('Using fallback data (API disabled)');
          data = fallbackLocations.filter(loc => 
            loc.display_name.toLowerCase().includes(query.toLowerCase())
          );
        }
        
        if (data.length === 0) {
          suggestionElement.innerHTML = `<div class="location-no-results">No locations found for "${query}"</div>`;
          errorElement.textContent = `No locations found for "${query}"`;
          errorElement.classList.remove('d-none');
          console.log('No results found');
        } else {
          errorElement.classList.add('d-none');
          
          let html = '';
          data.forEach(location => {
            // Format display name to be more readable
            let displayName = location.display_name;
            let mainName = displayName.split(',')[0];
            let address = displayName.split(',').slice(1, 3).join(',').trim();
            
            html += `
              <div class="location-suggestion-item" data-lat="${location.lat}" data-lon="${location.lon}" data-name="${location.display_name}">
                <div class="location-name">${mainName}</div>
                <div class="location-address">${address}</div>
              </div>
            `;
          });
          
          suggestionElement.innerHTML = html;
          console.log('Populated suggestions with', data.length, 'items');
          
          // Add click event listeners to suggestion items
          const items = suggestionElement.querySelectorAll('.location-suggestion-item');
          items.forEach(item => {
            item.addEventListener('click', function() {
              const lat = this.dataset.lat;
              const lon = this.dataset.lon;
              const name = this.dataset.name;
              console.log('Selected location:', name, lat, lon);
              
              if (suggestionElement === pickupSuggestions) {
                pickupInput.value = name.split(',')[0]; // Just show the main name in the input
                pickupLat.value = lat;
                pickupLon.value = lon;
                lastValidPickupValue = name.split(',')[0];
                pickupSelectedFromDropdown = true;
                pickupError.classList.add('d-none');
                
                // Update display
                pickupDisplay.textContent = name.split(',').slice(0, 2).join(',');
                pickupBadge.classList.add('bg-success');
                pickupBadge.innerHTML = '<i class="fas fa-check-circle me-1"></i> Pickup Set';
                
                // Update map
                updateMapIframe(
                  parseFloat(lat), 
                  parseFloat(lon),
                  destinationLat.value ? parseFloat(destinationLat.value) : null,
                  destinationLon.value ? parseFloat(destinationLon.value) : null
                );
              } else {
                destinationInput.value = name.split(',')[0]; // Just show the main name in the input
                destinationLat.value = lat;
                destinationLon.value = lon;
                lastValidDestinationValue = name.split(',')[0];
                destinationSelectedFromDropdown = true;
                destinationError.classList.add('d-none');
                
                // Update display
                destinationDisplay.textContent = name.split(',').slice(0, 2).join(',');
                destinationBadge.classList.add('bg-success');
                destinationBadge.innerHTML = '<i class="fas fa-check-circle me-1"></i> Destination Set';
                
                // Update map
                if (pickupLat.value && pickupLon.value) {
                  updateMapIframe(
                    parseFloat(pickupLat.value),
                    parseFloat(pickupLon.value),
                    parseFloat(lat),
                    parseFloat(lon)
                  );
                }
              }
              
              // Hide suggestions
              suggestionElement.style.display = 'none';
              
              // Update fare if both locations are set
              if (pickupLat.value && pickupLon.value && destinationLat.value && destinationLon.value) {
                updateFareEstimate();
              }
              
              // Show toast notification
              showToast(suggestionElement === pickupSuggestions ? 'Pickup location set' : 'Destination location set', 'success');
            });
          });
        }
      } catch (error) {
        console.error("Search error:", error);
        suggestionElement.innerHTML = '<div class="location-no-results">Error searching. Using fallback locations.</div>';
        errorElement.textContent = "Error searching for locations. Please try again.";
        errorElement.classList.remove('d-none');
        
        // Try with fallback data if main search fails
        if (useAPI) {
          console.log('Retrying with fallback data');
          searchLocations(query, suggestionElement, errorElement, false);
        }
      }
    }
    
    // Debounced search functions
    const debouncedPickupSearch = debounce((query) => {
      searchLocations(query, pickupSuggestions, pickupError);
    }, 300);
    
    const debouncedDestinationSearch = debounce((query) => {
      searchLocations(query, destinationSuggestions, destinationError);
    }, 300);
    
    // Input event listeners
    pickupInput.addEventListener('input', function() {
      console.log('Pickup input changed:', this.value);
      if (this.value.trim() !== lastValidPickupValue) {
        pickupSelectedFromDropdown = false;
        debouncedPickupSearch(this.value.trim());
      }
    });
    
    destinationInput.addEventListener('input', function() {
      console.log('Destination input changed:', this.value);
      if (this.value.trim() !== lastValidDestinationValue) {
        destinationSelectedFromDropdown = false;
        debouncedDestinationSearch(this.value.trim());
      }
    });
    
    // Focus event listeners
    pickupInput.addEventListener('focus', function() {
      console.log('Pickup input focused');
      if (this.value.trim().length >= 3) {
        debouncedPickupSearch(this.value.trim());
      } else if (this.value.trim() === '') {
        pickupSuggestions.innerHTML = '<div class="location-no-results">Type at least 3 characters to search</div>';
        pickupSuggestions.style.display = 'block';
      }
    });
    
    destinationInput.addEventListener('focus', function() {
      console.log('Destination input focused');
      if (this.value.trim().length >= 3) {
        debouncedDestinationSearch(this.value.trim());
      } else if (this.value.trim() === '') {
        destinationSuggestions.innerHTML = '<div class="location-no-results">Type at least 3 characters to search</div>';
        destinationSuggestions.style.display = 'block';
      }
    });
    
    // Blur event listeners
    pickupInput.addEventListener('blur', function() {
      console.log('Pickup input blur');
      // Delay hiding suggestions to allow for selection
      setTimeout(() => {
        pickupSuggestions.style.display = 'none';
        
        // If not selected from dropdown and value changed, show warning
        if (!pickupSelectedFromDropdown && this.value !== lastValidPickupValue && this.value.trim() !== '') {
          this.closest('.input-group').classList.add('location-invalid');
          pickupError.classList.remove('d-none');
          pickupError.textContent = "Please select a location from the suggestions";
          showToast('Please select a location from the suggestions', 'warning');
          
          // Reset to last valid value if there was one
          if (lastValidPickupValue) {
            this.value = lastValidPickupValue;
            this.closest('.input-group').classList.remove('location-invalid');
            pickupError.classList.add('d-none');
          } else {
            this.value = '';
          }
        }
      }, 200);
    });
    
    destinationInput.addEventListener('blur', function() {
      console.log('Destination input blur');
      // Delay hiding suggestions to allow for selection
      setTimeout(() => {
        destinationSuggestions.style.display = 'none';
        
        // If not selected from dropdown and value changed, show warning
        if (!destinationSelectedFromDropdown && this.value !== lastValidDestinationValue && this.value.trim() !== '') {
          this.closest('.input-group').classList.add('location-invalid');
          destinationError.classList.remove('d-none');
          destinationError.textContent = "Please select a location from the suggestions";
          showToast('Please select a location from the suggestions', 'warning');
          
          // Reset to last valid value if there was one
          if (lastValidDestinationValue) {
            this.value = lastValidDestinationValue;
            this.closest('.input-group').classList.remove('location-invalid');
            destinationError.classList.add('d-none');
          } else {
            this.value = '';
          }
        }
      }, 200);
    });
    
    // Calculate distance between two points using Haversine formula
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 6371; // Radius of the earth in km
      const dLat = deg2rad(lat2 - lat1);
      const dLon = deg2rad(lon2 - lon1);
      const a = 
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
        Math.sin(dLon/2) * Math.sin(dLon/2); 
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
      const distance = R * c; // Distance in km
      return distance;
    }
    
    function deg2rad(deg) {
      return deg * (Math.PI/180);
    }
    
    // Calculate fare based on distance
    function calculateFare(distance) {
      // Base fare for first 5km
      const baseFare = 5.00;
      // Rate per km after first 5km
      const ratePerKm = 1.50;
      // Rate per minute (estimated)
      const ratePerMinute = 0.20;
      // Platform fee
      const platformFee = 2.00;
      
      // Calculate distance fare
      let distanceFare = 0;
      if (distance > 5) {
        distanceFare = (distance - 5) * ratePerKm;
      }
      
      // Estimate time based on average speed of 40 km/h
      const estimatedTimeInMinutes = Math.ceil((distance / 40) * 60);
      const timeFare = estimatedTimeInMinutes * ratePerMinute;
      
      return {
        baseFare: baseFare,
        distanceFare: distanceFare,
        timeFare: timeFare,
        platformFee: platformFee,
        totalFare: baseFare + distanceFare + timeFare + platformFee,
        estimatedTimeInMinutes: estimatedTimeInMinutes,
        distance: distance
      };
    }
    
    // Update fare estimate
    function updateFareEstimate() {
      if (pickupLat.value && pickupLon.value && destinationLat.value && destinationLon.value) {
        const distance = calculateDistance(
          parseFloat(pickupLat.value),
          parseFloat(pickupLon.value),
          parseFloat(destinationLat.value),
          parseFloat(destinationLon.value)
        );
        
        const fareDetails = calculateFare(distance);
        
        // Update distance display
        distanceDisplay.textContent = `${distance.toFixed(2)} km`;
        
        // Update fare estimate display
        fareEstimate.classList.remove('d-none');
        fareInfo.classList.add('d-none');
        
        estimatedDistanceEl.textContent = distance.toFixed(2);
        estimatedTimeEl.textContent = fareDetails.estimatedTimeInMinutes;
        distanceFareEl.textContent = fareDetails.distanceFare.toFixed(2);
        timeFareEl.textContent = fareDetails.timeFare.toFixed(2);
        totalFareEl.textContent = fareDetails.totalFare.toFixed(2);
        
        distanceValueEl.textContent = distance.toFixed(2);
        timeValueEl.textContent = fareDetails.estimatedTimeInMinutes;
        
        // Update iframe with both markers
        updateMapIframe(
          parseFloat(pickupLat.value), 
          parseFloat(pickupLon.value),
          parseFloat(destinationLat.value),
          parseFloat(destinationLon.value)
        );
      }
    }
    
    // Update map iframe with markers
    function updateMapIframe(pickupLat, pickupLon, destLat, destLon) {
      const iframe = document.getElementById('map-iframe');
      
      // If we have both coordinates, center the map between them
      if (pickupLat && pickupLon && destLat && destLon) {
        const centerLat = (pickupLat + destLat) / 2;
        const centerLon = (pickupLon + destLon) / 2;
        
        // Calculate appropriate zoom level based on distance
        const distance = calculateDistance(pickupLat, pickupLon, destLat, destLon);
        let zoom = 13; // Default zoom
        
        if (distance < 1) zoom = 15;
        else if (distance < 5) zoom = 13;
        else if (distance < 20) zoom = 11;
        else zoom = 9;
        
        // Create a URL with both markers
        iframe.src = `https://www.openstreetmap.org/export/embed.html?bbox=${centerLon-0.05}%2C${centerLat-0.05}%2C${centerLon+0.05}%2C${centerLat+0.05}&layer=mapnik&marker=${pickupLat}%2C${pickupLon}%3B${destLat}%2C${destLon}`;
      }
      // If we only have pickup coordinates
      else if (pickupLat && pickupLon) {
        iframe.src = `https://www.openstreetmap.org/export/embed.html?bbox=${pickupLon-0.05}%2C${pickupLat-0.05}%2C${pickupLon+0.05}%2C${pickupLat+0.05}&layer=mapnik&marker=${pickupLat}%2C${pickupLon}`;
      }
    }
    
    // Reset button functionality
    resetButton.addEventListener('click', function() {
      // Clear inputs
      pickupInput.value = '';
      pickupLat.value = '';
      pickupLon.value = '';
      destinationInput.value = '';
      destinationLat.value = '';
      destinationLon.value = '';
      
      // Reset validation state
      lastValidPickupValue = '';
      lastValidDestinationValue = '';
      pickupSelectedFromDropdown = false;
      destinationSelectedFromDropdown = false;
      pickupError.classList.add('d-none');
      destinationError.classList.add('d-none');
      
      // Remove any validation styling
      document.querySelectorAll('.input-group.location-invalid').forEach(el => {
        el.classList.remove('location-invalid');
      });
      
      // Reset displays
      pickupDisplay.textContent = 'Not selected';
      destinationDisplay.textContent = 'Not selected';
      distanceDisplay.textContent = '0 km';
      
      // Reset badges
      pickupBadge.classList.remove('bg-success');
      pickupBadge.innerHTML = '<i class="fas fa-map-marker-alt me-1"></i> Pickup';
      destinationBadge.classList.remove('bg-success');
      destinationBadge.innerHTML = '<i class="fas fa-location-arrow me-1"></i> Destination';
      
      // Reset fare estimate
      fareEstimate.classList.add('d-none');
      fareInfo.classList.remove('d-none');
      
      // Reset map
      document.getElementById('map-iframe').src = "https://www.openstreetmap.org/export/embed.html?bbox=102.2697639465332%2C2.2639000000000087%2C102.3697639465332%2C2.3639000000000087&amp;layer=mapnik&amp;marker=2.3139%2C102.3197";
      
      // Show notification
      showToast('Map has been reset', 'info');
    });
    
    // Handle form submission
    document.getElementById('rideRequestForm').addEventListener('submit', function(e) {
      // Check if locations were selected from dropdown
      if (!pickupLat.value || !pickupLon.value || !destinationLat.value || !destinationLon.value || 
          !pickupSelectedFromDropdown || !destinationSelectedFromDropdown) {
        e.preventDefault();
        
        // Show specific validation errors
        if (!pickupSelectedFromDropdown || !pickupLat.value || !pickupLon.value) {
          pickupInput.closest('.input-group').classList.add('location-invalid');
          pickupError.classList.remove('d-none');
          pickupError.textContent = "Please select a valid pickup location from the suggestions";
          pickupInput.focus();
          showToast('Please select a valid pickup location from the suggestions', 'warning');
        }
        
        if (!destinationSelectedFromDropdown || !destinationLat.value || !destinationLon.value) {
          destinationInput.closest('.input-group').classList.add('location-invalid');
          destinationError.classList.remove('d-none');
          destinationError.textContent = "Please select a valid destination from the suggestions";
          if (pickupSelectedFromDropdown && pickupLat.value && pickupLon.value) {
            destinationInput.focus();
          }
          showToast('Please select a valid destination from the suggestions', 'warning');
        }
        
        // Scroll to the first invalid input
        const firstInvalid = document.querySelector('.input-group.location-invalid');
        if (firstInvalid) {
          firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
    });
    
    // Set current time as default
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    document.getElementById('time').value = `${hours}:${minutes}`;
    
    // Remove previous search buttons if they exist
    document.querySelectorAll('.search-button').forEach(btn => btn.remove());
    
    // Add direct search buttons
    const pickupSearchButton = document.createElement('button');
    pickupSearchButton.type = 'button';
    pickupSearchButton.className = 'search-button';
    pickupSearchButton.innerHTML = '<i class="fas fa-search"></i>';
    pickupSearchButton.addEventListener('click', function() {
      if (pickupInput.value.trim().length >= 3) {
        searchLocations(pickupInput.value.trim(), pickupSuggestions, pickupError);
      } else {
        showToast('Please enter at least 3 characters to search', 'warning');
      }
    });
    pickupInput.parentNode.appendChild(pickupSearchButton);
    
    const destinationSearchButton = document.createElement('button');
    destinationSearchButton.type = 'button';
    destinationSearchButton.className = 'search-button';
    destinationSearchButton.innerHTML = '<i class="fas fa-search"></i>';
    destinationSearchButton.addEventListener('click', function() {
      if (destinationInput.value.trim().length >= 3) {
        searchLocations(destinationInput.value.trim(), destinationSuggestions, destinationError);
      } else {
        showToast('Please enter at least 3 characters to search', 'warning');
      }
    });
    destinationInput.parentNode.appendChild(destinationSearchButton);
    
    // Test search functionality directly
    window.testSearch = function(query) {
      console.log('Testing search with query:', query);
      searchLocations(query, pickupSuggestions, pickupError);
    };
    
    // Add a button to manually show suggestions with fallback data
    const testButton = document.createElement('button');
    testButton.type = 'button';
    testButton.className = 'btn btn-sm btn-primary mt-2';
    testButton.textContent = 'Show Example Locations';
    testButton.style.display = 'none'; // Hide by default
    testButton.addEventListener('click', function() {
      // Use fallback data directly (skip API)
      searchLocations('universiti', pickupSuggestions, pickupError, false);
    });
    document.querySelector('.col-md-6').appendChild(testButton);
    
    // Show test button after 3 seconds if no suggestions have appeared
    setTimeout(() => {
      if (!pickupSuggestions.innerHTML || pickupSuggestions.style.display === 'none') {
        testButton.style.display = 'block';
        console.log('Showing test button due to possible API issues');
      }
    }, 3000);
    
    // Trigger a test search for debugging
    setTimeout(() => {
      if (pickupInput.value.trim().length >= 3) {
        searchLocations(pickupInput.value.trim(), pickupSuggestions, pickupError);
      } else {
        // Test with a default query
        searchLocations('universiti', pickupSuggestions, pickupError, false); // Use fallback data
      }
    }, 1000);
    
    console.log('Location search initialized');
    
    // Force show the suggestions container for testing
    setTimeout(() => {
      if (pickupSuggestions.style.display !== 'block') {
        console.log('Forcing display of suggestions container');
        pickupSuggestions.style.display = 'block';
        pickupSuggestions.innerHTML = '<div class="location-suggestion-item"><div class="location-name">Testing Display</div><div class="location-address">If you can see this, the container is working</div></div>';
      }
    }, 2000);
  });
  
  // Function to show toast notifications
  function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type} border-0 position-fixed bottom-0 end-0 m-3`;
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');
    toast.style.zIndex = '9999';
    
    toast.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">
          <i class="fas fa-${type === 'success' ? 'check-circle' : 'info-circle'} me-2"></i> ${message}
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    `;
    
    document.body.appendChild(toast);
    
    const bsToast = new bootstrap.Toast(toast, {
      autohide: true,
      delay: 3000
    });
    
    bsToast.show();
    
    // Remove from DOM after hiding
    toast.addEventListener('hidden.bs.toast', function() {
      document.body.removeChild(toast);
    });
  }
</script>