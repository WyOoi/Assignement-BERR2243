<div class="row">
  <div class="col-lg-12">
    <div class="card shadow-sm border-0" data-aos="fade-up">
      <div class="card-header bg-white p-4 border-0">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <span class="badge bg-primary rounded-pill px-3 py-2 mb-2">New Ride</span>
            <h5 class="card-title fw-bold mb-0">Request a Ride</h5>
          </div>
          <a href="/passenger" class="btn btn-sm btn-outline-secondary">
            <i class="fas fa-arrow-left me-2"></i> Back to Dashboard
          </a>
        </div>
      </div>
      <div class="card-body p-4">
        <form id="rideRequestForm" action="/passenger/request" method="POST">

          <!-- Custom styles for location validation -->
          <style>
            .input-group.location-invalid .form-control{border-color:#dc3545}
            .validation-icon{opacity:0;transition:opacity .3s ease}
            .validation-icon:not(.d-none){opacity:1}
            .invalid-feedback-custom{display:none;width:100%;margin-top:.25rem;font-size:.875em;color:#dc3545}
            .invalid-feedback-custom:not(.d-none){display:block}
            .location-suggestions{position:absolute;width:100%;max-height:350px;overflow-y:auto;background:#fff;border:1px solid #ddd;border-radius:.25rem;z-index:9999 !important;box-shadow:0 5px 10px rgba(0,0,0,.2);display:none;top:100%;left:0;margin-top:1px;}
            .location-header{background-color:#f8f9fa;padding:10px 15px;border-bottom:2px solid #e9ecef;position:sticky;top:0;z-index:2}
            .location-header-title{font-weight:600;color:#0d6efd;font-size:0.9rem}
            .location-suggestion-item{padding:12px 15px;border-bottom:1px solid #eee;cursor:pointer;transition:all 0.2s ease}
            .location-suggestion-item:hover{background-color:#f0f7ff;transform:translateY(-2px)}
            .location-suggestion-item .location-name{font-weight:600;color:#0d6efd;margin-bottom:3px}
            .location-suggestion-item .location-address{font-size:.85rem;color:#6c757d;margin-bottom:3px}
            .location-suggestion-item .location-distance{font-size:.8rem;color:#28a745;font-weight:500}
            .input-group-with-suggestions{position:relative !important;}
            .search-button{position:absolute;right:0;top:0;bottom:0;background:transparent;border:none;color:#6c757d;font-size:1.25rem;padding:0 15px;z-index:5;cursor:pointer;display:flex;align-items:center;justify-content:center}
            .search-button:hover{color:var(--bs-primary)}
            #map{min-height:450px!important;height:450px!important;width:100%!important;z-index:1!important;background-color:#f8f9fa!important}
            .ride-icon{width:40px;height:40px;border-radius:50%;display:flex;align-items:center;justify-content:center}
            @keyframes pulse{0%{transform:scale(.5);opacity:1}100%{transform:scale(2);opacity:0}}
          </style>

          <!-- Map Preview -->
          <div class="map-preview mb-4" data-aos="fade-up">
            <!-- OpenStreetMap with iframe -->
            <div class="card shadow-sm border-0 mb-3">
              <div class="card-header bg-white p-3 border-0">
                <div class="d-flex justify-content-between align-items-center">
                  <h6 class="fw-bold mb-0"><i class="fas fa-map-marked-alt text-primary me-2"></i> Interactive Map</h6>
                  <div>
                    <span class="badge bg-primary me-2" id="pickup-badge"><i class="fas fa-map-marker-alt me-1"></i> Pickup</span>
                    <span class="badge bg-danger" id="destination-badge"><i class="fas fa-location-arrow me-1"></i> Destination</span>
                  </div>
                </div>
              </div>
              <div class="card-body p-0">
                <!-- Simple Map Implementation -->
                <div id="simple-map-container" style="height: 450px; width: 100%; position: relative;">
                  <!-- Embed OpenStreetMap directly -->
                  <iframe 
                    id="map-iframe"
                    width="100%" 
                    height="450" 
                    frameborder="0" 
                    scrolling="no" 
                    marginheight="0" 
                    marginwidth="0" 
                    src="https://www.openstreetmap.org/export/embed.html?bbox=102.2697639465332%2C2.2639000000000087%2C102.3697639465332%2C2.3639000000000087&amp;layer=mapnik&amp;marker=2.3139%2C102.3197" 
                    style="border: 1px solid #ccc; width: 100%; height: 450px;">
                  </iframe>
                  
                  <div style="position: absolute; top: 10px; left: 10px; z-index: 1000; background: white; padding: 10px; border-radius: 5px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
                    <p class="mb-1"><strong>Pickup:</strong> <span id="pickup-display">Not selected</span></p>
                    <p class="mb-1"><strong>Destination:</strong> <span id="destination-display">Not selected</span></p>
                    <p class="mb-0"><strong>Distance:</strong> <span id="distance-display">0 km</span></p>
                  </div>
                </div>
              </div>
              <div class="card-footer bg-white p-3 border-0">
                <div class="d-flex justify-content-between align-items-center">
                  <small class="text-muted"><i class="fas fa-info-circle me-1"></i> Enter locations in the fields below to calculate fare</small>
                  <button type="button" class="btn btn-sm btn-outline-secondary" id="reset-map">
                    <i class="fas fa-redo-alt me-1"></i> Reset
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <div class="row" data-aos="fade-up" data-aos-delay="100">
            <div class="col-md-6 mb-4">
              <label for="pickup" class="form-label fw-bold">Pickup Location</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-map-marker-alt text-primary"></i>
                </span>
                <select class="form-select border-start-0" id="pickup" name="pickup" required>
                  <option value="" disabled>Select pickup location</option>
                  <option value="UTeM Main Campus" selected>UTeM Main Campus</option>
                  <option value="UTeM Technology Campus">UTeM Technology Campus</option>
                  <option value="UTeM City Campus">UTeM City Campus</option>
                  <option value="Melaka Sentral Bus Terminal">Melaka Sentral Bus Terminal</option>
                  <option value="AEON Melaka Shopping Centre">AEON Melaka Shopping Centre</option>
                  <option value="Melaka International Airport">Melaka International Airport</option>
                  <option value="Dataran Pahlawan Megamall">Dataran Pahlawan Megamall</option>
                  <option value="Mahkota Medical Centre">Mahkota Medical Centre</option>
                  <option value="A'Famosa Resort">A'Famosa Resort</option>
                </select>
              </div>
            </div>
            
            <div class="col-md-6 mb-4">
              <label for="destination" class="form-label fw-bold">Destination</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-location-arrow text-primary"></i>
                </span>
                <select class="form-select border-start-0" id="destination" name="destination" required>
                  <option value="" disabled>Select destination</option>
                  <option value="UTeM Main Campus">UTeM Main Campus</option>
                  <option value="UTeM Technology Campus">UTeM Technology Campus</option>
                  <option value="UTeM City Campus">UTeM City Campus</option>
                  <option value="Melaka Sentral Bus Terminal" selected>Melaka Sentral Bus Terminal</option>
                  <option value="AEON Melaka Shopping Centre">AEON Melaka Shopping Centre</option>
                  <option value="Melaka International Airport">Melaka International Airport</option>
                  <option value="Dataran Pahlawan Megamall">Dataran Pahlawan Megamall</option>
                  <option value="Mahkota Medical Centre">Mahkota Medical Centre</option>
                  <option value="A'Famosa Resort">A'Famosa Resort</option>
                </select>
              </div>
            </div>
          </div>
          
          <div class="row" data-aos="fade-up" data-aos-delay="200">
            <div class="col-md-6 mb-4">
              <label for="date" class="form-label fw-bold">Date</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-calendar-alt text-primary"></i>
                </span>
                <input type="date" class="form-control border-start-0" id="date" name="date" required min="<%= new Date().toISOString().split('T')[0] %>">
              </div>
            </div>
            
            <div class="col-md-6 mb-4">
              <label for="time" class="form-label fw-bold">Time</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-clock text-primary"></i>
                </span>
                <input type="time" class="form-control border-start-0" id="time" name="time" required>
              </div>
            </div>
          </div>
          
          <div class="row" data-aos="fade-up" data-aos-delay="300">
            <div class="col-md-6 mb-4">
              <label for="passengers" class="form-label fw-bold">Number of Passengers</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-users text-primary"></i>
                </span>
                <select class="form-select border-start-0" id="passengers" name="passengers" required>
                  <option value="1" selected>1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>
                  <option value="4">4</option>
                </select>
              </div>
            </div>
            
            <div class="col-md-6 mb-4">
              <label for="paymentMethod" class="form-label fw-bold">Payment Method</label>
              <div class="input-group input-group-lg">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-credit-card text-primary"></i>
                </span>
                <select class="form-select border-start-0" id="paymentMethod" name="paymentMethod">
                  <option value="cash" selected>Cash</option>
                  <option value="card">Card</option>
                  <option value="wallet">E-Wallet</option>
                </select>
              </div>
            </div>
          </div>
          
          <div class="mb-4" data-aos="fade-up" data-aos-delay="400">
            <label for="notes" class="form-label fw-bold">Additional Notes (Optional)</label>
            <div class="input-group">
              <span class="input-group-text bg-light border-end-0">
                <i class="fas fa-comment-alt text-primary"></i>
              </span>
              <textarea class="form-control border-start-0" id="notes" name="notes" rows="3" placeholder="Any special instructions for the driver"></textarea>
            </div>
          </div>
          
          <!-- Add hidden fields to store fare information -->
          <input type="hidden" id="distanceValue" name="distanceValue" value="11.8">
          <input type="hidden" id="estimatedTime" name="estimatedTime" value="29">
          <input type="hidden" id="totalFare" name="totalFare" value="29.3">
          
          <div class="d-grid" data-aos="fade-up" data-aos-delay="500">
            <button type="submit" class="btn btn-primary btn-lg shadow-sm">
              <i class="fas fa-paper-plane me-2"></i> Request Ride
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  

</div>

<!-- Add Leaflet CSS -->
<link rel="stylesheet" href="/js/leaflet/leaflet.css" />
<!-- Fallback Leaflet CSS if local file fails -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="anonymous" />

<!-- Add Leaflet Routing Machine CSS -->
<link rel="stylesheet" href="/js/leaflet-routing-machine/leaflet-routing-machine.css" />

<!-- Add Leaflet Locate Control CSS -->
<link rel="stylesheet" href="/js/leaflet-locatecontrol/L.Control.Locate.min.css" />

<!-- Add Leaflet JS -->
<script src="/js/leaflet/leaflet.js"></script>
<!-- Fallback Leaflet JS if local file fails -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin="anonymous"></script>

<!-- Add Leaflet Routing Machine JS -->
<script src="/js/leaflet-routing-machine/leaflet-routing-machine.js"></script>

<!-- Add Leaflet Locate Control JS -->
<script src="/js/leaflet-locatecontrol/L.Control.Locate.min.js"></script>

<!-- Script to initialize and customize the location selection -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Document loaded - initializing location selection');
    
    // Predefined locations with distances from UTeM Main Campus
    const locationDistances = {
      "UTeM Main Campus": "0.0",
      "UTeM Technology Campus": "7.5",
      "UTeM City Campus": "15.2",
      "Melaka Sentral Bus Terminal": "11.8",
      "AEON Melaka Shopping Centre": "8.3",
      "Melaka International Airport": "9.7",
      "Dataran Pahlawan Megamall": "16.4",
      "Mahkota Medical Centre": "16.7",
      "A'Famosa Resort": "14.3"
    };
    
    // Predefined locations with coordinates (for map display)
    const locationCoordinates = {
      "UTeM Main Campus": { lat: "2.3139", lon: "102.3197" },
      "UTeM Technology Campus": { lat: "2.2608", lon: "102.2908" },
      "UTeM City Campus": { lat: "2.1956", lon: "102.2495" },
      "Melaka Sentral Bus Terminal": { lat: "2.2343", lon: "102.2465" },
      "AEON Melaka Shopping Centre": { lat: "2.2672", lon: "102.2811" },
      "Melaka International Airport": { lat: "2.2636", lon: "102.2521" },
      "Dataran Pahlawan Megamall": { lat: "2.1905", lon: "102.2501" },
      "Mahkota Medical Centre": { lat: "2.1891", lon: "102.2485" },
      "A'Famosa Resort": { lat: "2.4127", lon: "102.2073" }
    };
    
    // DOM elements
    const pickupSelect = document.getElementById('pickup');
    const destinationSelect = document.getElementById('destination');
    
    // Initialize map display
    document.getElementById('pickup-display').textContent = pickupSelect.options[pickupSelect.selectedIndex].text;
    document.getElementById('destination-display').textContent = destinationSelect.options[destinationSelect.selectedIndex].text;
    
    // Update map and calculate fare on initial load
    updateMapWithLocations();
    calculateFare();
    
    // Add change event listeners to select elements
    pickupSelect.addEventListener('change', function() {
      const selectedOption = this.options[this.selectedIndex];
      document.getElementById('pickup-display').textContent = selectedOption.text;
      
      updateMapWithLocations();
      calculateFare();
    });
    
    destinationSelect.addEventListener('change', function() {
      const selectedOption = this.options[this.selectedIndex];
      document.getElementById('destination-display').textContent = selectedOption.text;
      
      updateMapWithLocations();
      calculateFare();
    });
    
    // Function to update map with selected locations
    function updateMapWithLocations() {
      const pickupName = pickupSelect.options[pickupSelect.selectedIndex].text;
      const destinationName = destinationSelect.options[destinationSelect.selectedIndex].text;
      
      const pickupCoords = locationCoordinates[pickupName];
      const destCoords = locationCoordinates[destinationName];
      
      if (pickupCoords && destCoords) {
        const pLat = pickupCoords.lat;
        const pLon = pickupCoords.lon;
        const dLat = destCoords.lat;
        const dLon = destCoords.lon;
        
        // Update the iframe map
        const mapIframe = document.getElementById('map-iframe');
        if (mapIframe) {
          const centerLat = (parseFloat(pLat) + parseFloat(dLat)) / 2;
          const centerLon = (parseFloat(pLon) + parseFloat(dLon)) / 2;
          
          // Calculate appropriate zoom level based on distance
          const distance = calculateDistance(
            parseFloat(pLat), parseFloat(pLon),
            parseFloat(dLat), parseFloat(dLon)
          );
          
          let zoom = 13; // Default zoom
          if (distance > 10) zoom = 11;
          if (distance > 30) zoom = 10;
          if (distance > 60) zoom = 9;
          if (distance > 100) zoom = 8;
          
          mapIframe.src = `https://www.openstreetmap.org/export/embed.html?bbox=${centerLon-0.05}%2C${centerLat-0.05}%2C${centerLon+0.05}%2C${centerLat+0.05}&layer=mapnik&marker=${pLat}%2C${pLon}%3B${dLat}%2C${dLon}`;
          
          // Update distance display
          document.getElementById('distance-display').textContent = distance.toFixed(1) + ' km';
        }
      }
    }
    
    // Function to calculate distance between two points using Haversine formula
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 6371; // Radius of the earth in km
      const dLat = deg2rad(lat2 - lat1);
      const dLon = deg2rad(lon2 - lon1);
      const a = 
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
        Math.sin(dLon/2) * Math.sin(dLon/2); 
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
      return R * c; // Distance in km
    }
    
    function deg2rad(deg) {
      return deg * (Math.PI/180);
    }
    
    // Function to calculate fare
    function calculateFare() {
      const pickupName = pickupSelect.options[pickupSelect.selectedIndex].text;
      const destinationName = destinationSelect.options[destinationSelect.selectedIndex].text;
      
      // Calculate distance - use predefined mock distance if both locations are from our list
      let distance;
      
      if (pickupName === "UTeM Main Campus") {
        // If pickup is UTeM Main Campus, use the destination's distance directly
        distance = parseFloat(locationDistances[destinationName]);
      } 
      else if (destinationName === "UTeM Main Campus") {
        // If destination is UTeM Main Campus, use the pickup's distance directly
        distance = parseFloat(locationDistances[pickupName]);
      } 
      else {
        // Otherwise calculate an approximate distance between the two points
        const pickupDistFromUTeM = parseFloat(locationDistances[pickupName]);
        const destDistFromUTeM = parseFloat(locationDistances[destinationName]);
        
        // If they're in roughly the same direction from UTeM, subtract the distances
        // Otherwise add them (simplified approach)
        if ((pickupName.includes('City') && destinationName.includes('City')) ||
            (pickupName.includes('Ayer Keroh') && destinationName.includes('Ayer Keroh'))) {
          distance = Math.abs(pickupDistFromUTeM - destDistFromUTeM);
        } else {
          // Add a factor to make the distance more realistic
          distance = (pickupDistFromUTeM + destDistFromUTeM) * 0.7;
        }
      }
      
      // Calculate estimated time (rough estimate: 2 min per km + 5 min base)
      const estimatedTimeMinutes = Math.round(distance * 2) + 5;
      
      // Calculate fare
      const baseFare = 5.00;
      const distanceFare = distance * 1.50; // RM 1.50 per km
      const timeFare = estimatedTimeMinutes * 0.20; // RM 0.20 per minute
      const platformFee = 2.00;
      const totalFare = baseFare + distanceFare + timeFare + platformFee;
      
      // Update distance display in the map overlay
      document.getElementById('distance-display').textContent = distance.toFixed(1) + ' km';
      
      // Update hidden fields for form submission
      document.getElementById('distanceValue').value = distance.toFixed(1);
      document.getElementById('estimatedTime').value = estimatedTimeMinutes;
      document.getElementById('totalFare').value = totalFare; // Store the actual number, not the string
      
      console.log('Fare calculation:', {
        distance,
        estimatedTimeMinutes,
        baseFare,
        distanceFare,
        timeFare,
        platformFee,
        totalFare
      });
    }
    
    // Reset map button
    const resetMapButton = document.getElementById('reset-map');
    if (resetMapButton) {
      resetMapButton.addEventListener('click', function() {
        // Reset select elements to their first options
        pickupSelect.selectedIndex = 0;
        destinationSelect.selectedIndex = 0;
        
        // Reset displays
        document.getElementById('pickup-display').textContent = pickupSelect.options[0].text;
        document.getElementById('destination-display').textContent = destinationSelect.options[0].text;
        document.getElementById('distance-display').textContent = '0 km';
      
        // Reset map
        const mapIframe = document.getElementById('map-iframe');
        if (mapIframe) {
          mapIframe.src = "https://www.openstreetmap.org/export/embed.html?bbox=102.2697639465332%2C2.2639000000000087%2C102.3697639465332%2C2.3639000000000087&amp;layer=mapnik&amp;marker=2.3139%2C102.3197";
        }
        
        // Reset hidden form fields
        document.getElementById('distanceValue').value = '0';
        document.getElementById('estimatedTime').value = '0';
        document.getElementById('totalFare').value = '0';
      });
    }
    
    // Set current time as default
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    document.getElementById('time').value = `${hours}:${minutes}`;
    
    // Set today's date as default
    document.getElementById('date').value = new Date().toISOString().split('T')[0];
    
    // Calculate fare on page load to ensure values are set
    calculateFare();
    
    // Add form submission handler to double-check values
    document.getElementById('rideRequestForm').addEventListener('submit', function(e) {
      // Recalculate fare before submitting
      calculateFare();
      
      const fareValue = document.getElementById('totalFare').value;
      if (!fareValue || parseFloat(fareValue) <= 0) {
        console.warn('Fare value is invalid, recalculating before submission');
        calculateFare();
      }
      
      console.log('Form submission - fare value:', document.getElementById('totalFare').value);
    });
  });
</script>